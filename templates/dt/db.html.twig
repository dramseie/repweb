{% extends 'base.html.twig' %}

{% block stylesheets %}
  <link rel="stylesheet" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.min.css">
  <style>
    .dt-toolbar { display:flex; justify-content: flex-end; gap:.5rem; margin-bottom:.5rem; }
    .dt-toolbar .btn { padding:.45rem .75rem; border:1px solid #ddd; border-radius:.5rem; cursor:pointer; background:#f8f8f8; }
    .dt-toolbar .btn:hover { background:#eee; }
  </style>
{% endblock %}

{% block body %}
	<div
	  id="react-datatables-report"
	  data-repid="{{ repid }}"
	  data-reptitle="{{ reptitle|default('')|e('html_attr') }}"
	  data-repdesc="{{ repdesc|default('')|e('html_attr') }}"
	  data-cols-url="{{ path('dt_db_columns', { repid: repid }) }}"
	  data-data-url="{{ path('dt_db_data', { repid: repid }) }}"
	  data-apikey="{{ repweb_api_key|e('html_attr') }}"
	></div>
{% endblock %}



{% block javascripts %}
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.datatables.net/2.0.8/js/dataTables.min.js"></script>
  <script>
    (async function () {
      const repid = {{ repid }};
      const urlCols = '{{ path("dt_db_columns", {repid: 0}) }}'.replace('0', repid);
      const urlData = '{{ path("dt_db_data", {repid: 0}) }}'.replace('0', repid);

	  window.REPWEB_API_KEY = '{{ repweb_api_key|e('js') }}';
      const host   = document.getElementById('react-datatables-report');
      const apiKey = host?.dataset?.apikey || window.REPWEB_API_KEY || '';

      // 1) fetch column names

	  const colsRes = await fetch(urlCols, {
        headers: apiKey ? { 'X-Api-Key': apiKey } : {}
      });	  
      const { columns } = await colsRes.json();

      // 2) build headers + filter inputs
      document.getElementById('dt-head').innerHTML =
        columns.map(c => `<th>${c.replaceAll('_',' ')}</th>`).join('');
      document.getElementById('dt-filters').innerHTML =
        columns.map(() => `<th><input type="text" placeholder="filter" style="width:100%"></th>`).join('');

      const dtCols = columns.map(c => ({ data: c }));
      let currentDtParams = {};

      // 3) init DataTables
      const table = $('#dt').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
          url: urlData,
		  headers: apiKey ? { 'X-Api-Key': apiKey } : {},
          data: function (d) {
            // d is the object DataTables will send; we also keep a copy for CSV export
            currentDtParams = structuredClone ? structuredClone(d) : JSON.parse(JSON.stringify(d));
          }
        },
        columns: dtCols,
        pageLength: 10
      });

      // 4) wire per-column search inputs
      $('#dt thead tr#dt-filters th input').each(function (i) {
        $(this).on('keyup change', function () {
          table.column(i).search(this.value).draw();
        });
      });

      // 5) CSV export â€” serialize the latest DT params + format=csv
      function serializeParams(obj, prefix) {
        // jQuery-like param serializer (supports nested arrays/objects with bracket notation)
        const pairs = [];
        const add = (key, value) => pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value ?? ''));
        if (obj === null || obj === undefined) return '';
        if (typeof obj !== 'object') {
          add(prefix, obj);
        } else if (Array.isArray(obj)) {
          obj.forEach((v, i) => {
            const k = prefix ? `${prefix}[${i}]` : i;
            if (typeof v === 'object') {
              pairs.push(serializeParams(v, k));
            } else {
              add(k, v);
            }
          });
        } else {
          Object.keys(obj).forEach(key => {
            const v = obj[key];
            const k = prefix ? `${prefix}[${key}]` : key;
            if (typeof v === 'object' && v !== null) {
              pairs.push(serializeParams(v, k));
            } else {
              add(k, v);
            }
          });
        }
        return pairs.join('&');
      }

      document.getElementById('btnCsv').addEventListener('click', function () {
        // Ensure we reflect any latest typing in filter boxes
        table.draw(false);

        // Build query with current DT params + format=csv
        const qp = serializeParams(currentDtParams);
        const qs = qp ? (qp + '&format=csv') : 'format=csv';
        const downloadUrl = urlData + '?' + (qs + (apiKey ? '&api_key=' + encodeURIComponent(apiKey) : ''));

        // Navigate to start download
        window.location.href = downloadUrl;
      });
    })();
  </script>
{% endblock %}
